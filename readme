# ðŸ§  Spaced Repetition CLI Tool

A lightweight CLI-based system to manage your study or review topics using a spaced repetition strategy. It stores revision history and schedules future reviews based on a simple algorithm (doubling the interval each time: 1, 2, 4, 8, ... days).

---

## âœ… Features

- Add new study/review topics with optional URLs  
- Automatically generate a revision schedule using spaced repetition  
- Reset or update topics (e.g., if reviewed early or poorly understood)  
- View today's revision list with helpful metadata  
- Persist all state in simple, readable JSON files  

---

## ðŸ§  How Spaced Repetition Works

Each topic follows a power-of-2 spaced interval system:

- Day 0 â†’ +1 â†’ +2 â†’ +4 â†’ +8 â†’ +16 â†’ ...

If you review early or feel less confident, you can **reset** the topic to an earlier stage.

---

## Dependencies
- Python 3.7+
- Only standard library (no external packages required)


## Future Work and Architecture Evolution

I plan to migrate from local csv storage to a multi-service backend system. The future architecture will separate responsibilities across different clients and services. (learning)

### Planned Flow

1. **Java Backend Service**  
   - Handles all reads and writes to a PostgreSQL database  
   - Exposes a REST API to serve revision data and accept updates

2. **Python Spaced Repetition Client**  
   - Requests topic revision data from the Java API
   - Loads data into Polars for efficient manipulation and business logic application  
   - Sends updated revision data back to the Java API for database update

**Example flow**
   - Python requests topic revisions from Java API â†’ Java queries PostgreSQL â†’ returns JSON â†’ Python loads to Polars â†’ manipulates â†’ Python sends updated data to Java â†’ Java updates PostgreSQL.

##  License
MIT â€” Free to use, modify, and distribute.